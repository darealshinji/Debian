--- /dev/null
+++ b/src/editor/libs/codemirror/mode/makefile/index.html
@@ -0,0 +1,67 @@
+<!doctype html>
+
+<title>CodeMirror: Makefile mode</title>
+<meta charset="utf-8"/>
+<link rel=stylesheet href="../../doc/docs.css">
+
+<link rel=stylesheet href=../../lib/codemirror.css>
+<script src=../../lib/codemirror.js></script>
+<script src="../../addon/edit/matchbrackets.js"></script>
+<script src=makefile.js></script>
+<style type=text/css>
+  .CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}
+</style>
+<div id=nav>
+  <a href="http://codemirror.net"><img id=logo src="../../doc/logo.png"></a>
+
+  <ul>
+    <li><a href="../../index.html">Home</a>
+    <li><a href="../../doc/manual.html">Manual</a>
+    <li><a href="https://github.com/marijnh/codemirror">Code</a>
+  </ul>
+  <ul>
+    <li><a href="../index.html">Language modes</a>
+    <li><a class=active href="#">Makefile</a>
+  </ul>
+</div>
+
+<article>
+<h2>Makefile mode</h2>
+
+
+<textarea id=code>
+#!/usr/bin/make -f
+
+include debian/confflags
+
+DEB_HOST_GNU_CPU        =  $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
+
+%:
+	dh ${@} --parallel
+
+.PHONY: ../source/main/main.cpp
+
+# a comment
+../source/main/main.cpp:
+	@echo "make custom"
+ifeq ($(DEB_HOST_GNU_CPU), amd64)
+	$(MAKE) -f debian/custom64.mk
+else
+	$(MAKE) -f debian/custom.mk
+endif
+
+override_dh_install:
+	dh_install --list-missing #another comment
+	$$makro
+</textarea>
+
+<script>
+  var editor = CodeMirror.fromTextArea(document.getElementById('code'), {
+    mode: 'makefile',
+    lineNumbers: true,
+    matchBrackets: true
+  });
+</script>
+
+<p><strong>MIME types defined:</strong> <code>text/x-makefile</code>.</p>
+</article>
--- /dev/null
+++ b/src/editor/libs/codemirror/mode/makefile/makefile.js
@@ -0,0 +1,138 @@
+// CodeMirror, copyright (c) by Marijn Haverbeke and others
+// Distributed under an MIT license: http://codemirror.net/LICENSE
+
+(function(mod) {
+  if (typeof exports == "object" && typeof module == "object") // CommonJS
+    mod(require("../../lib/codemirror"));
+  else if (typeof define == "function" && define.amd) // AMD
+    define(["../../lib/codemirror"], mod);
+  else // Plain browser env
+    mod(CodeMirror);
+})(function(CodeMirror) {
+"use strict";
+
+CodeMirror.defineMode('makefile', function() {
+
+  var words = {};
+
+  function tokenBase(stream, state) {
+    if (stream.eatSpace()) return null;
+
+    var sol = stream.sol();
+    var ch = stream.next();
+    var cur = stream.current();
+
+    if (sol && ch === '#') {
+      if (stream.eat('!')) {
+        stream.skipToEnd();
+        return 'meta';
+      }
+      stream.skipToEnd();
+      return 'tag';
+    }
+
+    // ifeq, ifneq
+    if (ch === 'i' && (stream.match('feq ') || stream.match('fneq '))) {
+      stream.skipToEnd();
+      return "bracket";
+    }
+    // else, endif
+    if (ch === 'e' && (stream.match('lse') || stream.match('ndif')) && stream.eol()) { return "bracket"; }
+    // include
+    if (sol && ch === 'i' && stream.match('nclude ')) { return "string"; }
+    // makros
+    if (sol && (stream.match(/^[\w]+[\s]+/) || stream.match(/^[\w]+/)) &&
+       (stream.peek() === '=' ||
+       ((stream.match('?') || stream.match('+') || stream.match('-')) && stream.peek() === '='))
+	   ) { return "variable-2"; }
+
+    // Makefile targets
+    if (sol && stream.eat(':')) {
+      if (stream.peek('=')) {
+        return "variable-2";
+      } else {
+        return "header";
+      }
+    }
+    else if (sol && ch === '$' && stream.match(/^\(+[\w]+\)+/) && stream.eat(':')) { return "header"; }
+    else if (sol && stream.match(/^\$+\(+[\w]+\)+/) && stream.eat(':')) { return "header"; }
+    else if (sol && stream.match(/^(.)+[\w]+:+ /)) { return "header"; }
+    else if (sol && stream.match(/^(.)+[\w]+:/) && stream.eol()) { return "header"; }
+
+    if (ch === '@') { return "atom"; }
+    if (ch === '*') { return "quote"; }
+    if (ch === '\\' && stream.eol()) { return "comment"; }
+    if (ch === '#') {
+      stream.skipToEnd();
+      return 'tag';
+    }
+    if (ch === '%') {
+        if (sol && stream.eat(':')) {
+        return 'header';
+      }
+      return 'atom';
+    }
+
+    if (ch === '$' && stream.eat('$') && stream.match(/^[\w]+/)) { return "variable-2"; }
+    if (ch === '$' && stream.eat('(')) {
+      state.tokens.unshift(tokenDollar);
+      return tokenize(stream, state);
+    }
+    if (ch === '$' && stream.eat('{')) {
+      state.tokens.unshift(tokenDollarB);
+      return tokenize(stream, state);
+    }
+    if (ch === '$' && (stream.eat('@') || stream.eat('<') || stream.eat('^'))) { return "quote"; }
+
+    if (ch === '\'' || ch === '"' || ch === '`') {
+      state.tokens.unshift(tokenString(ch));
+      return tokenize(stream, state);
+    }
+    stream.eatWhile(/[\w-]/);
+    return words.hasOwnProperty(cur) ? words[cur] : null;
+  }
+
+  function tokenString(quote) {
+    return function(stream, state) {
+      var next, end = false, escaped = false;
+      while ((next = stream.next()) != null) {
+        if (next === quote && !escaped) {
+          end = true;
+          break;
+        }
+      }
+      if (end || !escaped) {
+        state.tokens.shift();
+      }
+      return ((quote === ')' || quote === '}') ? 'variable-2' : 'string');
+    };
+  };
+
+
+  var tokenDollar = function(stream, state) {
+    if (state.tokens.length > 1) stream.eat('$');
+    state.tokens[0] = tokenString(')');
+    return tokenize(stream, state);
+  };
+  var tokenDollarB = function(stream, state) {
+    if (state.tokens.length > 1) stream.eat('$');
+    state.tokens[0] = tokenString('}');
+    return tokenize(stream, state);
+  };
+
+  function tokenize(stream, state) {
+    return (state.tokens[0] || tokenBase) (stream, state);
+  };
+
+  return {
+    startState: function() {return {tokens:[]};},
+    token: function(stream, state) {
+      return tokenize(stream, state);
+    },
+	lineComment: "#"
+  };
+});
+
+CodeMirror.defineMIME('text/x-makefile', 'makefile');
+
+});
--- a/src/editor/libs/codemirror/mode/meta.js
+++ b/src/editor/libs/codemirror/mode/meta.js
@@ -63,6 +63,7 @@
     {name: "LESS", mime: "text/x-less", mode: "css", ext: ["less"]},
     {name: "LiveScript", mime: "text/x-livescript", mode: "livescript", ext: ["ls"], alias: ["ls"]},
     {name: "Lua", mime: "text/x-lua", mode: "lua", ext: ["lua"]},
+    {name: "Makefile", mime: "text/x-makefile", mode: "makefile"},
     {name: "Markdown (GitHub-flavour)", mime: "text/x-markdown", mode: "markdown", ext: ["markdown", "md", "mkd"]},
     {name: "mIRC", mime: "text/mirc", mode: "mirc"},
     {name: "MariaDB SQL", mime: "text/x-mariadb", mode: "sql"},
