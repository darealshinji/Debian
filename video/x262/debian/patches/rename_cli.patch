--- a/x262-source/x264.c
+++ b/x262-source/x264.c
@@ -47,7 +47,7 @@
 #include "output/output.h"
 #include "filters/filters.h"
 
-#define FAIL_IF_ERROR( cond, ... ) FAIL_IF_ERR( cond, "x264", __VA_ARGS__ )
+#define FAIL_IF_ERROR( cond, ... ) FAIL_IF_ERR( cond, "x262", __VA_ARGS__ )
 
 #if HAVE_LAVF
 #undef DECLARE_ALIGNED
@@ -303,9 +303,9 @@
 static void print_version_info( void )
 {
 #ifdef X264_POINTVER
-    printf( "x264 "X264_POINTVER"\n" );
+    printf( "x262 "X264_POINTVER"\n" );
 #else
-    printf( "x264 0.%d.X\n", X264_BUILD );
+    printf( "x262 0.%d.X\n", X264_BUILD );
 #endif
 #if HAVE_SWSCALE
     printf( "(libswscale %d.%d.%d)\n", LIBSWSCALE_VERSION_MAJOR, LIBSWSCALE_VERSION_MINOR, LIBSWSCALE_VERSION_MICRO );
@@ -328,7 +328,7 @@
 #if HAVE_MPEG2
     printf( "               --enabled-mpeg2\n" );
 #endif
-    printf( "x264 license: " );
+    printf( "x262 license: " );
 #if HAVE_GPL
     printf( "GPL version 2 or later\n" );
 #else
@@ -463,8 +463,8 @@
 #define H0 printf
 #define H1 if(longhelp>=1) printf
 #define H2 if(longhelp==2) printf
-    H0( "x264 core:%d%s\n"
-        "Syntax: x264 [options] -o outfile infile\n"
+    H0( "x262 core:%d%s\n"
+        "Syntax: x262 [options] -o outfile infile\n"
         "\n"
         "Infile can be raw (in which case resolution is required),\n"
         "  or YUV4MPEG (*.y4m),\n"
@@ -511,20 +511,20 @@
     H0( "Example usage:\n" );
     H0( "\n" );
     H0( "      Constant quality mode:\n" );
-    H0( "            x264 --crf 24 -o <output> <input>\n" );
+    H0( "            x262 --crf 24 -o <output> <input>\n" );
     H0( "\n" );
     H0( "      Two-pass with a bitrate of 1000kbps:\n" );
-    H0( "            x264 --pass 1 --bitrate 1000 -o <output> <input>\n" );
-    H0( "            x264 --pass 2 --bitrate 1000 -o <output> <input>\n" );
+    H0( "            x262 --pass 1 --bitrate 1000 -o <output> <input>\n" );
+    H0( "            x262 --pass 2 --bitrate 1000 -o <output> <input>\n" );
     H0( "\n" );
     H0( "      Lossless:\n" );
-    H0( "            x264 --qp 0 -o <output> <input>\n" );
+    H0( "            x262 --qp 0 -o <output> <input>\n" );
     H0( "\n" );
     H0( "      Maximum PSNR at the cost of speed and visual quality:\n" );
-    H0( "            x264 --preset placebo --tune psnr -o <output> <input>\n" );
+    H0( "            x262 --preset placebo --tune psnr -o <output> <input>\n" );
     H0( "\n" );
     H0( "      Constant bitrate at 1000kbps with a 2 second-buffer:\n");
-    H0( "            x264 --vbv-bufsize 2000 --bitrate 1000 -o <output> <input>\n" );
+    H0( "            x262 --vbv-bufsize 2000 --bitrate 1000 -o <output> <input>\n" );
     H0( "\n" );
     H0( "Presets:\n" );
     H0( "\n" );
@@ -749,7 +749,7 @@
         "                                  or  b=<float> (bitrate multiplier)\n" );
     H2( "      --qpfile <string>       Force frametypes and QPs for some or all frames\n"
         "                              Format of each line: framenumber frametype QP\n"
-        "                              QP is optional (none lets x264 choose). Frametypes: I,i,K,P,B,b.\n"
+        "                              QP is optional (none lets x262 choose). Frametypes: I,i,K,P,B,b.\n"
         "                                  K=<I or i> depending on open-gop setting\n"
         "                              QPs are restricted by qpmin/qpmax.\n" );
     H1( "\n" );
@@ -1172,11 +1172,11 @@
         param->b_repeat_headers = 0;
         if( param->i_nal_hrd == X264_NAL_HRD_CBR )
         {
-            x264_cli_log( "x264", X264_LOG_WARNING, "cbr nal-hrd is not compatible with mp4\n" );
+            x264_cli_log( "x262", X264_LOG_WARNING, "cbr nal-hrd is not compatible with mp4\n" );
             param->i_nal_hrd = X264_NAL_HRD_VBR;
         }
 #else
-        x264_cli_log( "x264", X264_LOG_ERROR, "not compiled with MP4 output support\n" );
+        x264_cli_log( "x262", X264_LOG_ERROR, "not compiled with MP4 output support\n" );
         return -1;
 #endif
     }
@@ -1223,7 +1223,7 @@
         cli_input = avs_input;
         module = "avs";
 #else
-        x264_cli_log( "x264", X264_LOG_ERROR, "not compiled with AVS input support\n" );
+        x264_cli_log( "x262", X264_LOG_ERROR, "not compiled with AVS input support\n" );
         return -1;
 #endif
     }
@@ -1491,7 +1491,7 @@
                 FAIL_IF_ERROR( !opt->qpfile, "can't open qpfile `%s'\n", optarg )
                 if( !x264_is_regular_file( opt->qpfile ) )
                 {
-                    x264_cli_log( "x264", X264_LOG_ERROR, "qpfile incompatible with non-regular file `%s'\n", optarg );
+                    x264_cli_log( "x262", X264_LOG_ERROR, "qpfile incompatible with non-regular file `%s'\n", optarg );
                     fclose( opt->qpfile );
                     return -1;
                 }
@@ -1608,7 +1608,7 @@
         if( b_error )
         {
             const char *name = long_options_index > 0 ? long_options[long_options_index].name : argv[optind-2];
-            x264_cli_log( "x264", X264_LOG_ERROR, "invalid argument: %s = %s\n", name, optarg );
+            x264_cli_log( "x262", X264_LOG_ERROR, "invalid argument: %s = %s\n", name, optarg );
             return -1;
         }
     }
@@ -1622,7 +1622,7 @@
         return -1;
 
     /* Get the file name */
-    FAIL_IF_ERROR( optind > argc - 1 || !output_filename, "No %s file. Run x264 --help for a list of options.\n",
+    FAIL_IF_ERROR( optind > argc - 1 || !output_filename, "No %s file. Run x262 --help for a list of options.\n",
                    optind > argc - 1 ? "input" : "output" )
 
     if( select_output( muxer, output_filename, param ) )
@@ -1678,7 +1678,7 @@
     {
         if( thread_input.open_file( NULL, &opt->hin, &info, NULL ) )
         {
-            fprintf( stderr, "x264 [error]: threaded input failed\n" );
+            fprintf( stderr, "x262 [error]: threaded input failed\n" );
             return -1;
         }
         cli_input = thread_input;
@@ -1751,13 +1751,13 @@
     if( !b_user_interlaced && info.interlaced )
     {
 #if HAVE_INTERLACED
-        x264_cli_log( "x264", X264_LOG_WARNING, "input appears to be interlaced, enabling %cff interlaced mode.\n"
+        x264_cli_log( "x262", X264_LOG_WARNING, "input appears to be interlaced, enabling %cff interlaced mode.\n"
                       "                If you want otherwise, use --no-interlaced or --%cff\n",
                       info.tff ? 't' : 'b', info.tff ? 'b' : 't' );
         param->b_interlaced = 1;
         param->b_tff = !!info.tff;
 #else
-        x264_cli_log( "x264", X264_LOG_WARNING, "input appears to be interlaced, but not compiled with interlaced support\n" );
+        x264_cli_log( "x262", X264_LOG_WARNING, "input appears to be interlaced, but not compiled with interlaced support\n" );
 #endif
     }
     /* if the user never specified the output range and the input is now rgb, default it to pc */
@@ -1818,7 +1818,7 @@
         else ret = 0;
         if( ret < 2 || qp < -1 || qp > QP_MAX )
         {
-            x264_cli_log( "x264", X264_LOG_ERROR, "can't parse qpfile for frame %d\n", i_frame );
+            x264_cli_log( "x262", X264_LOG_ERROR, "can't parse qpfile for frame %d\n", i_frame );
             fclose( opt->qpfile );
             opt->qpfile = NULL;
             break;
@@ -1862,12 +1862,12 @@
     if( i_frame_total )
     {
         int eta = i_elapsed * (i_frame_total - i_frame) / ((int64_t)i_frame * 1000000);
-        sprintf( buf, "x264 [%.1f%%] %d/%d frames, %.2f fps, %.2f kb/s, eta %d:%02d:%02d",
+        sprintf( buf, "x262 [%.1f%%] %d/%d frames, %.2f fps, %.2f kb/s, eta %d:%02d:%02d",
                  100. * i_frame / i_frame_total, i_frame, i_frame_total, fps, bitrate,
                  eta/3600, (eta/60)%60, eta%60 );
     }
     else
-        sprintf( buf, "x264 %d frames: %.2f fps, %.2f kb/s", i_frame, fps, bitrate );
+        sprintf( buf, "x262 %d frames: %.2f fps, %.2f kb/s", i_frame, fps, bitrate );
     fprintf( stderr, "%s  \r", buf+5 );
     x264_cli_set_console_title( buf );
     fflush( stderr ); // needed in windows
@@ -1886,7 +1886,7 @@
 #define FAIL_IF_ERROR2( cond, ... )\
 if( cond )\
 {\
-    x264_cli_log( "x264", X264_LOG_ERROR, __VA_ARGS__ );\
+    x264_cli_log( "x262", X264_LOG_ERROR, __VA_ARGS__ );\
     retval = -1;\
     goto fail;\
 }
@@ -1902,7 +1902,7 @@
         case 8: // 2D video
             break;
         default:
-            x264_cli_log( "x264", X264_LOG_ERROR, "unsupported frame packing %d\n", frame_packing );
+            x264_cli_log( "x262", X264_LOG_ERROR, "unsupported frame packing %d\n", frame_packing );
             return -1;
     }
 
@@ -1976,13 +1976,13 @@
                     param->i_frame_rate_code = X264_MPEG2_30FPS_NTSC;
                 else
                 {
-                    x264_cli_log( "x264", X264_LOG_ERROR, "euro pulldown only supported for exact 24fps input\n" );
+                    x264_cli_log( "x262", X264_LOG_ERROR, "euro pulldown only supported for exact 24fps input\n" );
                     return -1;
                 }
             }
             else
             {
-            x264_cli_log( "x264", X264_LOG_ERROR, "unsupported framerate for chosen pulldown\n" );
+            x264_cli_log( "x262", X264_LOG_ERROR, "unsupported framerate for chosen pulldown\n" );
                 return -1;
             }
         }
@@ -2083,10 +2083,10 @@
         if( pic.i_pts <= largest_pts )
         {
             if( cli_log_level >= X264_LOG_DEBUG || pts_warning_cnt < MAX_PTS_WARNING )
-                x264_cli_log( "x264", X264_LOG_WARNING, "non-strictly-monotonic pts at frame %d (%"PRId64" <= %"PRId64")\n",
+                x264_cli_log( "x262", X264_LOG_WARNING, "non-strictly-monotonic pts at frame %d (%"PRId64" <= %"PRId64")\n",
                              i_frame, pic.i_pts, largest_pts );
             else if( pts_warning_cnt == MAX_PTS_WARNING )
-                x264_cli_log( "x264", X264_LOG_WARNING, "too many nonmonotonic pts warnings, suppressing further ones\n" );
+                x264_cli_log( "x262", X264_LOG_WARNING, "too many nonmonotonic pts warnings, suppressing further ones\n" );
             pts_warning_cnt++;
             pic.i_pts = largest_pts + ticks_per_frame;
         }
@@ -2143,7 +2143,7 @@
     }
 fail:
     if( pts_warning_cnt >= MAX_PTS_WARNING && cli_log_level < X264_LOG_DEBUG )
-        x264_cli_log( "x264", X264_LOG_WARNING, "%d suppressed nonmonotonic pts warnings\n", pts_warning_cnt-MAX_PTS_WARNING );
+        x264_cli_log( "x262", X264_LOG_WARNING, "%d suppressed nonmonotonic pts warnings\n", pts_warning_cnt-MAX_PTS_WARNING );
 
     /* duration algorithm fails when only 1 frame is output */
     if( i_frame_output == 1 )
--- a/x262-source/Makefile
+++ b/x262-source/Makefile
@@ -193,7 +193,6 @@
 x262: x262$(EXE)
 endif
 x262$(EXE): x264
-	ln -sf x264$(EXE) x262$(EXE)
 endif
 
 checkasm$(EXE): $(GENERATED) .depend $(OBJCHK) $(LIBX264)
