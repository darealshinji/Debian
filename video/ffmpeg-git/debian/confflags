# -*- mode: makefile -*-
# vim:syntax=make

export DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
export DEB_HOST_ARCH      ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
export DEB_HOST_ARCH_CPU  ?= $(shell dpkg-architecture -qDEB_HOST_ARCH_CPU)
export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)

SVNREVISION=$(shell cat .svnrevision 2>/dev/null || echo "UNKNOWN")

CROSS :=
ifneq ($(DEB_BUILD_GNU_TYPE),$(DEB_HOST_GNU_TYPE))
    CROSS :=  $(DEB_HOST_GNU_TYPE)-
endif

# this outputs 0 or 1 depending on whether a macro appears in the *default* cpp
# -dM -P output; this is used to test the toolchain *default* configuration
check_cpp = $(shell $(CROSS)cpp -dM -P /dev/null | grep -q '^\#define $(1)' && echo 1 || echo 0)

# this outputs 0 or 1 depending on whether a piece of assembly can be compiled
# with the *default* gcc flags; this is used to test the toolchain *default*
# configuration
check_asm = $(shell echo 'void foo(void) { __asm__ volatile("$(1)"); }' | $(CROSS)gcc -x c -c - -o /dev/null 2>/dev/null && echo 1 || echo 0)

# Conditionally enable certain features depending on
# the corresponding header file being installed or not
define cond_enable
	$(shell test -r $(1) && echo --enable-$(2) )
endef

# variant that also requires --enable-version3
define cond_enable_v3
	$(shell test -r $(1) && echo --enable-$(2) --enable-version3 )
endef

# variant that also requires --enable-nonfree
define cond_enable_nf
	$(shell test -r $(1) && echo --enable-$(2) --enable-nonfree )
endef

# Common configuration flags
confflags += --arch='$(DEB_HOST_ARCH_CPU)'
confflags += --enable-avresample
confflags += --enable-pthreads
confflags += --enable-runtime-cpudetect
confflags += --extra-version='$(DEB_VERSION)'
confflags += --libdir=/usr/lib/ffmpeg
confflags += --prefix=/usr
confflags += $(shell test -x /usr/bin/yasm || echo --disable-yasm )

# Additional features
confflags += $(call cond_enable,/usr/include/ass/ass.h,libass)
confflags += $(call cond_enable,/usr/include/libbluray/bluray.h,libbluray)
confflags += $(call cond_enable,/usr/include/bzlib.h,bzlib)
confflags += $(call cond_enable,/usr/include/dc1394/dc1394.h,libdc1394)
confflags += $(call cond_enable,/usr/include/dirac/libdirac_decoder/dirac_parser.h,libdirac)
confflags += $(call cond_enable,/usr/include/freetype2/freetype/freetype.h,libfreetype)
confflags += $(call cond_enable,/usr/include/frei0r.h,frei0r)
confflags += $(call cond_enable,/usr/include/gnutls/gnutls.h,gnutls)
confflags += $(call cond_enable,/usr/include/gsm/gsm.h,libgsm)
confflags += $(call cond_enable,/usr/include/lame/lame.h,libmp3lame)
confflags += $(call cond_enable,/usr/include/librtmp/http.h,librtmp)
confflags += $(call cond_enable,/usr/include/opencv/cv.hpp,libopencv)
confflags += $(call cond_enable,/usr/include/openjpeg.h,libopenjpeg)
confflags += $(call cond_enable,/usr/include/opus/opus.h,libopus)
confflags += $(call cond_enable,/usr/include/pulse/simple.h,libpulse)
confflags += $(call cond_enable,/usr/include/schroedinger-1.0/schroedinger/schro.h,libschroedinger)
confflags += $(call cond_enable,/usr/include/speex/speex.h,libspeex)
confflags += $(call cond_enable,/usr/include/theora/theoraenc.h,libtheora)
confflags += $(call cond_enable,/usr/include/va/va.h,vaapi)
confflags += $(call cond_enable,/usr/include/vdpau/vdpau.h,vdpau)
confflags += $(call cond_enable,/usr/include/vorbis/vorbisenc.h,libvorbis)
confflags += $(call cond_enable,/usr/include/vpx/vpx_encoder.h,libvpx)
confflags += $(call cond_enable,/usr/include/wavpack/wavpack.h,libwavpack)
confflags += $(call cond_enable,/usr/include/webp/encode.h,libwebp)
confflags += $(call cond_enable,/usr/include/zlib.h,zlib)

# Configuration flags causing the libs to be GPL tainted
gpl_confflags += --enable-gpl
gpl_confflags += --enable-postproc
gpl_confflags += $(call cond_enable,/usr/include/cdio/paranoia.h,libcdio)
gpl_confflags += $(call cond_enable,/usr/include/X11/extensions/XShm.h,x11grab)
gpl_confflags += $(call cond_enable,/usr/include/x264.h,libx264)
gpl_confflags += $(call cond_enable,/usr/include/x265.h,libx265)
gpl_confflags += $(call cond_enable,/usr/include/xvid.h,libxvid)
# comment out following line for LGPL versions of the libraries
confflags += $(gpl_confflags)

# Features that require (L)GPL v3
v3_confflags += $(call cond_enable_v3,/usr/include/opencore-amrnb/interf_dec.h,libopencore-amrnb)
v3_confflags += $(call cond_enable_v3,/usr/include/opencore-amrwb/dec_if.h,libopencore-amrwb)
v3_confflags += $(call cond_enable_v3,/usr/include/vo-aacenc/voAAC.h,libvo-aacenc)
v3_confflags += $(call cond_enable_v3,/usr/include/vo-amrwbenc/enc_if.h,libvo-amrwbenc)

# Features that are considered non-free
nf_confflags += $(call cond_enable_nf,/usr/include/faac.h,libfaac)
nf_confflags += $(call cond_enable_nf,/usr/include/fdk-aac/aacenc_lib.h,libfdk-aac)

# Enable hardened build flags through dpkg-buildflags
CFLAGS := $(filter-out -Werror=format-security -g -O2,$(shell dpkg-buildflags --get CFLAGS))
CPPFLAGS := $(shell dpkg-buildflags --get CPPFLAGS)
LDFLAGS := $(filter-out %-Bsymbolic-functions,$(shell dpkg-buildflags --get LDFLAGS))
LDFLAGS += -Wl,-z,noexecstack

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
# Various parts of ffmpeg FTBFS when compiling with -fPIC
# and with mmx code enabled.
  confflags += --disable-optimizations
  confflags += --disable-mmx
endif

# Configuration flags for the static libraries
static_build_confflags += $(confflags)
static_build_confflags += --disable-ffmpeg
static_build_confflags += --disable-ffplay
static_build_confflags += --disable-ffprobe
static_build_confflags += --disable-ffserver
static_build_confflags += --disable-debug

# Configuration flags for the non-optimized shared libraries
shared_build_confflags += $(confflags) --shlibdir=/usr/lib/ffmpeg
shared_build_confflags += --enable-shared
shared_build_confflags += --disable-static
shared_build_confflags += --disable-stripping

