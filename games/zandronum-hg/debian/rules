#!/usr/bin/make -f

CC ?= gcc

common_flags  = -Wall -Wno-maybe-uninitialized -Wno-unused-but-set-variable -Wno-parentheses
common_flags += $(shell pkg-config --cflags sdl)
common_flags += $(shell pkg-config --cflags sqlite3)
common_flags += $(CPPFLAGS)

CFLAGS   += $(common_flags) -Wno-pointer-sign
CXXFLAGS += $(common_flags)
LDFLAGS  += -Wl,--as-needed
# link the executable against the system's sqlite3 library
LDFLAGS  += $(shell pkg-config --libs sqlite3)

DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
ifeq ($(DEB_HOST_ARCH), amd64)
LIB64 = 64
endif
fmoddir = fmodapi42416linux
fmodlib = $(CURDIR)/$(fmoddir)$(LIB64)/api/lib/libfmodex$(LIB64)-4.24.16.so


%:
	dh ${@} --parallel

override_dh_auto_clean:
	rm -rf build $(fmoddir) $(fmoddir)64

override_dh_auto_configure:
	tar xvf $(fmoddir)$(LIB64).tgz
	mkdir build
	cd build && cmake .. \
	-DCMAKE_VERBOSE_MAKEFILE=ON \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_SKIP_RPATH=ON \
	-DFMOD_INCLUDE_DIR=$(CURDIR)/$(fmoddir)$(LIB64)/api/inc \
	-DFMOD_LIBRARY=$(fmodlib)

override_dh_auto_build:
	dh_auto_build -Dbuild
	# re-link liboutput_sdl.so against SDL
	rm build/output_sdl/liboutput_sdl.so
	$(CC) -shared -Wl,-soname,liboutput_sdl.so $(LDFLAGS) -o \
		build/output_sdl/liboutput_sdl.so \
		build/output_sdl/CMakeFiles/output_sdl.dir/output_sdl.o -lSDL
	cp $(fmodlib) build

override_dh_shlibdeps:
	dh_shlibdeps -l$(CURDIR)/debian/zandronum/usr/lib/zandronum

